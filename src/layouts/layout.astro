---
// Définit une interface TypeScript pour les propriétés du composant.
interface Props {
  title: string; //  Spécifie que la propriété title doit être une chaîne de caractères.
}

const { title } = Astro.props; // Extrait 'title' définit lors de l'utilisation du composant.
import Header from '../layouts/header.astro';
import Footer from './footer.astro';
import '../fonts/fonts.css';
---

<!doctype html>
<html lang="fr">
  <head>
    <!-- Encodage des caractères pour le document -->
    <meta charset="UTF-8" />
    <!-- Fournit une description du site pour les moteurs de recherche -->
    <meta name="description" content="Esportify" />
    <!-- adapte la largeur de la page à celle de l'écran, force le zoom initial à 100% -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Styles globaux, initialisation supplémentaire à l'initialisation faite par tailwind --> 
    <style>

      :root {
        --primary-color: #d00000a6;
        --secondary-color: #1F191D;
      }
      body {
        background: linear-gradient(to bottom, #251e23, #121012);
        @apply text-text font-body min-h-screen flex-1;
      }
      h1, h2, h3, h4 {
        text-wrap: balance;
      }
      /* personalisation de la scrollbar */
      ::-webkit-scrollbar {
        height: 1rem;
        /* height of horizontal scrollbar */
        width: 1rem;
        /* width of vertical scrollbar */
      }
      /* Track */
      ::-webkit-scrollbar-track {
        background: var(--primary-color);
      }
      /* Handle */
      ::-webkit-scrollbar-thumb {
        background: var(--primary-color);
      }
      /* Scrollbar corner */
      ::-webkit-scrollbar-corner {
        background: var(--primary-color);
      }
      /* GOOGLE CHROME */
      * {
        scrollbar-width: auto;
        scrollbar-color: var(--primary-color) var(--secondary-color);
      }
      /* Browsers without `::-webkit-scrollbar-*` support */
      @supports (not selector(::-webkit-scrollbar)) {
        * {
          scrollbar-width: auto;
          scrollbar-color: var(--primary-color) var(--secondary-color);
        }
      }

      /* API view transition CSS */
      @view-transition {
        navigation: auto; /* enabled! */
      }
    </style>

    <!-- îcone de l'onglet du navigateur et google -->
    <link rel="icon" type="image/png" href="logoesportify.png" />

     <!-- Indique le générateur du site (Astro) -->
    <meta name="generator" content={Astro.generator} />

    <!-- Définit le titre de la page par une valeur à lui donner quand on utilise ce composant (Props)-->
    <title>{title}</title>
    
    <!-- Charge Alpine.js pour l'interactivité Client -->
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.3/dist/cdn.min.js"
    ></script>
    <!-- Charge htmx pour l'interactivité Serveur -->
    <script
      defer
      src="https://unpkg.com/htmx.org@2.0.2"
      integrity="sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ"
      crossorigin="anonymous"></script>
    <!-- Configure htmx pour autoriser les requêtes vers des domaines externes + Transition pendant les swaps  -->
    <meta name="htmx-config" content='{"selfRequestsOnly":false,"globalViewTransitions":true}' />

  </head>

 <script>
    import { jwtDecode } from 'jwt-decode';
    
    // Récupérer le token depuis sessionStorage
    const token = sessionStorage.getItem('jwt');
    window.role = 'visiteur' as string; // Rôle par défaut
    if (token) {
        try {
          const decoded = jwtDecode< MyJwtPayload>(token);
            window.role = decoded.role;
            console.log("Rôle utilisateur:", decoded.role);
            // Émet un événement personnalisé
            window.dispatchEvent(new CustomEvent('role-changed', { detail: { role: decoded.role } }));
        } catch (error) {
            console.error("Erreur lors du décodage du token:", error);
        }
    } else {
        console.log("Aucun token trouvé, rôle par défaut:", window.role);
        window.dispatchEvent(new CustomEvent('role-changed', { detail: { role: 'visiteur' } }));
    }
</script>
<script>
  document.body.addEventListener('htmx:configRequest', function(event) {
  const customEvent = event as CustomEvent;
  const token = sessionStorage.getItem('jwt');
  if (token) {
    customEvent.detail.xhr.setRequestHeader('Authorization', 'Bearer ' + token);
  }
});

</script>

  <body class="min-h-screen flex flex-col">
    <main class="flex-1">
    <Header />

    <slot /> <!-- Zone HTML à l'intérieur du composant, où le contenu spécifique de chaque page sera inséré -->

    </main>
    <Footer />
  </body>

</html>