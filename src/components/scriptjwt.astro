<script>
  import { jwtDecode } from "jwt-decode";

  function handleRoleChange(role: string, storageType = "sessionStorage") {
    window.role = role;
    window.dispatchEvent(
      new CustomEvent("role-changed", {
        detail: { role, storageType },
      })
    );
    console.log(`Rôle mis à jour: ${role} (Stocké dans: ${storageType})`);  
  }

  function initializeUserRole() {
    // Vérifie si l'utilisateur préfère localStorage ou sessionStorage
    const tokenLocal = localStorage.getItem("jwt");
    const tokenSession = sessionStorage.getItem("jwt");

    if (!tokenLocal && !tokenSession) {
    handleRoleChange("visiteur", "sessionStorage");
    return;
    }

    // Détermine où le token est stocké et le type de stockage
    const token = tokenLocal || tokenSession;
    const storageType: "sessionStorage" | "localStorage" = tokenLocal ? "localStorage" : "sessionStorage";

    if (!token) {
      handleRoleChange("visiteur", "sessionStorage");
      return;
    }

    try {
      const decoded = jwtDecode<MyJwtPayload>(token);
      handleRoleChange(decoded.role, storageType);
    } catch (error) {
      console.error("Erreur de décodage JWT:", error);
      handleRoleChange("visiteur", "sessionStorage");
    }
  }

  // Initialise le rôle au chargement
  initializeUserRole();
</script>
